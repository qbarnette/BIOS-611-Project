# Load libraries
library(httr)
library(lubridate)
library(openxlsx)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(knitr)
library(reshape2)
library(kableExtra)
# Set the directory path
directory_path <- "C:/Users/qbarnette/OneDrive - Research Triangle Institute/UNC/BIOS 611/bios_611_project/source_data"
data <- read.csv(merged_data)
# Load libraries
library(httr)
library(lubridate)
library(openxlsx)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(knitr)
library(reshape2)
library(kableExtra)
# Set the directory path
directory_path <- "C:/Users/qbarnette/OneDrive - Research Triangle Institute/UNC/BIOS 611/bios_611_project/source_data"
file_name <- "merged_data.xlsx"
file_path <- file.path(directory_path, file_name)
# Read the Excel file
data <- read_excel(file_path)
# Load libraries
library(httr)
library(lubridate)
library(openxlsx)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(knitr)
library(reshape2)
library(kableExtra)
# Set the directory path
setwd("C:/Users/qbarnette/OneDrive - Research Triangle Institute/UNC/BIOS 611/bios_611_project/source_data")
read.csv(merged_data)
# Load libraries
library(httr)
library(lubridate)
library(openxlsx)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(knitr)
library(reshape2)
library(kableExtra)
# Set the directory path
setwd("C:\Users\qbarnette\OneDrive - Research Triangle Institute\UNC\BIOS 611\bios_611_project\source_data")
setwdsetwd("C:\\Users\\qbarnette\\OneDrive - Research Triangle Institute\\UNC\\BIOS 611\\bios_611_project\\source_data")
setwd("C:\\Users\\qbarnette\\OneDrive - Research Triangle Institute\\UNC\\BIOS 611\\bios_611_project\\source_data")
read.csv(merged_data)
list.files
getwd
getwd()
# Set the directory path
setwd("C:/Users/qbarnette/OneDrive - Research Triangle Institute/UNC/BIOS 611/bios_611_project/source_data")
list.files()
# Set the working directory to the "source_data" folder
setwd("C:/Users/qbarnette/OneDrive - Research Triangle Institute/UNC/BIOS 611/bios_611_project/source_data")
# List the files in the working directory to confirm that you are in the correct directory
list.files()
# Load the "merged_data" dataset from the CSV file
data <- read.csv("merged_data.csv")
library(ggplot2)
ggplot(merged_data, aes(x = State)) +
geom_bar(fill = "lightblue") +
labs(title = "Missing Persons by State") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 80, hjust = 1))
# Load the "merged_data" dataset from the CSV file
merged_data <- read.csv("merged_data.csv")
# Load the "merged_data" dataset from the CSV file
merged_data <- read.csv("merged_data.csv")
# Load libraries
library(httr)
library(lubridate)
library(openxlsx)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(knitr)
library(reshape2)
library(kableExtra)
# Set the working directory to the "source_data" folder
setwd("C:/Users/qbarnette/OneDrive - Research Triangle Institute/UNC/BIOS 611/bios_611_project/source_data")
# List the files in the working directory to confirm that you are in the correct directory
list.files()
# Load the "merged_data" dataset from the CSV file
merged_data <- read.csv("merged_data.csv")
library(ggplot2)
ggplot(merged_data, aes(x = State)) +
geom_bar(fill = "lightblue") +
labs(title = "Missing Persons by State") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 80, hjust = 1))
library(ggplot2)
# Assuming your dataset is named 'merged_data'
# Extract the 'Missing.Age' column
# Ensure that 'Missing.Age' is a character column
merged_data$Missing.Age <- as.character(merged_data$Missing.Age)
# Create age bins in groups of 5
merged_data$Age_Group <- cut(as.numeric(gsub(" Years", "", merged_data$Missing.Age)),
breaks = seq(0, max(as.numeric(gsub(" Years", "", merged_data$Missing.Age)), na.rm = TRUE) + 5, by = 5),
labels = paste0(seq(0, max(as.numeric(gsub(" Years", "", merged_data$Missing.Age)), na.rm = TRUE), by = 5), "-", seq(4, max(as.numeric(gsub(" Years", "", merged_data$Missing.Age)), na.rm = TRUE) + 4, by = 5)))
# Create a data frame with the count of missing persons by age group
missing_by_age_group <- merged_data %>%
group_by(Age_Group) %>%
summarise(Count = n())
# Create a bar chart for missing persons by age group
ggplot(missing_by_age_group, aes(x = reorder(Age_Group, -Count), y = Count, fill = Age_Group)) +
geom_bar(stat = "identity", width = 0.5) +
labs(title = "Missing Persons by Age Group (in 5-year intervals)", x = "Age Group") +  # Set x-axis label
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(merged_data)
unique_responses <- unique(merged_data$Race...Ethnicity)
unique_responses
unique_responses <- unique(merged_data$Race...Ethnicity)
unique_responses
# Replace responses with multiple racial categories with "Multiple"
data$Race...Ethnicity <- gsub(".*?,.*", "Multiple", data$Race...Ethnicity)
# Check the unique values in the modified variable
unique(data$Race...Ethnicity)
unique_responses <- unique(merged_data$Race...Ethnicity)
unique_responses
# Replace responses with multiple racial categories with "Multiple"
data$Race...Ethnicity <- gsub(".*,.*", "Multiple", data$Race...Ethnicity)
# Check the unique values in the modified variable
unique(data$Race...Ethnicity)
# Replace any response with a comma with "Multiple"
data$Race...Ethnicity <- gsub(".*,.*", "Multiple", data$Race...Ethnicity)
# Check the unique values in the modified variable
unique(data$Race...Ethnicity)
unique_responses <- unique(merged_data$Race...Ethnicity)
unique_responses
# Replace any response with a comma with "Multiple"
data$Race...Ethnicity <- gsub(".*,.*", "Multiple", data$Race...Ethnicity)
# Check the unique values in the modified variable
unique(data$Race...Ethnicity)
unique_responses <- unique(merged_data$Race...Ethnicity)
unique_responses
# Replace responses with a comma with "Multiple"
data$Race...Ethnicity[data$Race...Ethnicity != "" & grepl(",", data$Race...Ethnicity)] <- "Multiple"
# Check the unique values in the modified variable
unique(data$Race...Ethnicity)
unique_responses <- unique(merged_data$Race...Ethnicity)
unique_responses
data$Race...Ethnicity <- ifelse(grepl(",", data$Race...Ethnicity), "Multiple", data$Race...Ethnicity)
# Check the unique values in the modified variable
unique(data$Race...Ethnicity)
merged_data$Race...Ethnicity[merged_data$Race...Ethnicity == 'Hispanic / Latino, Uncertain'] <- 'Multiple'
unique(data$Race...Ethnicity)
unique_responses <- unique(merged_data$Race...Ethnicity)
unique_responses
merged_data$Race...Ethnicity[merged_data$Race...Ethnicity == 'Hispanic / Latino, Uncertain'] <- 'Multiple'
# Check the unique values in the modified variable
unique(data$Race...Ethnicity)
unique_responses <- unique(merged_data$Race...Ethnicity)
unique_responses
merged_data$Race...Ethnicity[str_detect(merged_data$Race...Ethnicity, ",")] = "Multiple"
# Check the unique values in the modified variable
unique(data$Race...Ethnicity)
unique_responses <- unique(merged_data$Race...Ethnicity)
unique_responses
#Calulate length of time in database
# Load the lubridate package if not already installed
# install.packages("lubridate")
library(lubridate)
# Convert the "DLC" column to a Date object
data$DLC <- mdy(data$DLC)  # Assumes month-day-year format, adjust if needed
# Calculate the difference between today and the "DLC" dates
data$Days_In_Dataset <- as.numeric(difftime(Sys.Date(), data$DLC, units = "days"))
# View the updated dataset
head(data)  # View the first few rows with the new variable
# Convert the "DLC" column to a Date object
merged_data$DLC <- mdy(merged_data$DLC)  # Assumes month-day-year format, adjust if needed
# Calculate the difference between today and the "DLC" dates
merged_data$Days_In_Dataset <- as.numeric(difftime(Sys.Date(), merged_data$DLC, units = "days"))
# Create a summary data frame with the average length of time by "Race...Ethnicity"
summary_data <- aggregate(Days_In_Dataset ~ Race...Ethnicity, data = merged_data, FUN = mean)
# Create a bar plot
ggplot(summary_data, aes(x = Race...Ethnicity, y = Days_In_Dataset)) +
geom_bar(stat = "identity") +
labs(x = "Race...Ethnicity", y = "Average Length of Time") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Create a summary data frame with the count of entries by "Race...Ethnicity"
summary_data1 <- data.frame(table(merged_data$Race...Ethnicity))
# Create a bar plot
ggplot(summary_data, aes(x = Var1, y = Freq)) +
geom_bar(stat = "identity") +
labs(x = "Race...Ethnicity", y = "Count of Entries") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
category_counts <- table(merged_data$Race...Ethnicity)
# Create a data frame for plotting
category_data <- data.frame(Category = names(category_counts), Count = as.numeric(category_counts))
# Create a bar plot
ggplot(category_data, aes(x = Category, y = Count)) +
geom_bar(stat = "identity") +
labs(x = "Race...Ethnicity", y = "Count of Entries") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
